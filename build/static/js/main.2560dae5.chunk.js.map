{"version":3,"sources":["axios.js","Components/Row.js","Requests.js","Components/Banner.js","Components/Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","console","log","data","results","fetchData","table","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2560dae5.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n/** base url to make request to the movie database */\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","import React, { useEffect, useState } from 'react';\r\nimport axios from '../axios';\r\nimport \"./Row.css\";\r\nimport Youtube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\"\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\"\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\"); \r\n\r\n  // A snippet of code which runs based on a specific condition\r\n\r\n  useEffect(() => {\r\n     // if [], which means => run once when the row loads, and don't run it again.\r\n     async function fetchData() {\r\n       const request = await axios.get(fetchUrl); //\"https://api.themoviedb.org/3/discover/tv?api_key=${API_KEY}&with_networks=213\", \r\n       console.log(request.data.results);\r\n       setMovies(request.data.results)\r\n       return request;       \r\n     }\r\n     fetchData();\r\n  }, [fetchUrl]);   \r\n\r\n    /* Whenever use anything inside useEffect, \r\n  if any variable that is being pulled in from outside\r\n  but it's used inside of the useEffect, we have to include inside of here.\r\n  Reason: because it's dependent on that variable,\r\n  so dependency, every time this changes we have to update our useEffect so that way \r\n  Why this (fetchUrl) one: Because this is outside of the block, \r\n  we need to tell useEffect that you're using this variable which is outside the block\r\n  The reason why is because that way useEffect knows something changed so I need to refile the code*/\r\n\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      //https://developers.google.com/youtube/player_parameters\r\n      autoplay: 1,\r\n    },\r\n  }; \r\n\r\n  //for adding movie trailer popups......................\r\n  const handleClick = (movie) => {\r\n    if(trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      movieTrailer(movie?.name || \"\")\r\n      .then(url => {\r\n        const urlParams = new URLSearchParams(new URL(url).search);\r\n        setTrailerUrl(urlParams.get('v'));\r\n      })\r\n      .catch((error) => console.log(error));\r\n    }\r\n  }\r\n\r\n  console.table(movies);\r\n\r\n  return ( \r\n\r\n    <div className=\"row\">\r\n\r\n      {/* title.................................................... */}\r\n      <h2> {title} </h2>\r\n\r\n      {/* container -> posters ..................................... */}   \r\n\r\n      <div className=\"row_posters\">\r\n        {/* several row_poster(s) */}\r\n\r\n        {movies.map(movie => (          \r\n          <img                         //\"/obLBdhLxheKg8Li1qO11r2SwmYO.jpg\"\r\n            key={movie.id}\r\n            onClick={() => handleClick(movie)}\r\n            className={`row_poster ${isLargeRow && \"row_posterLarger\"}`}\r\n            src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} \r\n            alt={movie.name}/>        /* if it doesn't get the image, it'll just get the name */\r\n        ))}\r\n      </div>  \r\n\r\n      {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} /> } \r\n      {/* when we have trailerUrl, then show youtube video */}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY = \"e41f742e4095524e33c3fb7b9c8cb90a\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`\r\n}\r\n\r\nexport default requests;","import React, {useEffect, useState} from 'react'\r\nimport axios from '../axios';\r\nimport requests from '../Requests';\r\nimport './Banner.css'\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\n                request.data.results\r\n                [\r\n                    Math.floor(Math.random() * request.data.results.length - 1) \r\n                    //to get random object/ movie in the array or to get the object from the array randomly.\r\n                ]\r\n            );\r\n            return request;          \r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    console.log(movie);\r\n\r\n    function truncate(str, n) {\r\n        return str?.length > n ? str.substr(0, n -1 ) + \"...\" : str;\r\n    }\r\n    \r\n    return (\r\n        <header className=\"banner\"\r\n          /* <<<Background image */\r\n          style={{\r\n              backgroundSize: \"cover\",\r\n              backgroundImage: `url(\r\n                  \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n              )`,\r\n              backgroundPosition: \"center center\"\r\n          }}\r\n        > \r\n          <div className=\"banner_contents\"> \r\n            {/* title */}\r\n            <h1 className=\"banner_title\">                \r\n                {movie?.title || movie?.name || movie?.original_name}\r\n            </h1>\r\n\r\n            {/* 2 buttons : 'Play' & ''My List' */}\r\n            <div className=\"banner_buttons\">\r\n                <button className=\"banner_button\">Play</button>\r\n                <button className=\"banner_button\">My List</button>\r\n            </div>\r\n\r\n            {/* description */}\r\n            <h1 className=\"banner_description\">\r\n                {truncate(movie?.overview, 150)}\r\n            </h1>\r\n          </div>\r\n\r\n          <div className=\"banner--fadeBottom\" />\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner;","import React, { useState, useEffect } from 'react';\r\nimport \"./Nav.css\"\r\n\r\nfunction Nav() {\r\n    const [show, handleShow] = useState(false);\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 100) {\r\n        handleShow(true);\r\n      } else {\r\n        handleShow(false);\r\n      }\r\n    });\r\n    return () => {\r\n      window.removeEventListener(\"scroll\");\r\n    };\r\n  }, []);\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav_black\"}`}>\r\n            <img\r\n               className=\"nav_logo\"\r\n               src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1920px-Netflix_2015_logo.svg.png\"\r\n               alt=\"Netflix Logo\"\r\n            />   \r\n\r\n            <img\r\n               className=\"nav_avatar\"\r\n               src=\"https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png\"\r\n               alt=\"Netflix Logo\"\r\n            /> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav;","import React from 'react';\nimport './App.css';\nimport Row from './Components/Row'\nimport requests from \"./Requests\";\nimport Banner from \"./Components/Banner\";\nimport Nav from \"./Components/Nav\";\n\nfunction App() {\n  return (\n\n    <div className=\"app\"> \n      <Nav />\n      <Banner />\n      <Row \n        title=\"NETFLIX ORIGINALS\"  \n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow={true}\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />  \n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />    \n      <Row title=\"Action Movies\" fetchUrl={requests. fetchActionMovies} />    \n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />    \n      <Row title=\"Horror Movies\" fetchUrl={requests. fetchHorrorMovies} />    \n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />       \n\n    </div>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}